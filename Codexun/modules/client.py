import aiofiles
import ffmpeg
import asyncio
import os
import shutil
import psutil
import subprocess
import requests
import aiohttp
import yt_dlp
import aiohttp
import random

from os import path
from typing import Union
from asyncio import QueueEmpty
from PIL import Image, ImageFont, ImageDraw, ImageFilter
from PIL import ImageGrab
from typing import Callable

from pytgcalls import StreamType
from pytgcalls.types.input_stream import InputStream
from pytgcalls.types.input_stream import InputAudioStream

from youtube_search import YoutubeSearch

from pyrogram import Client, filters
from pyrogram.types import (
    Message,
    Voice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from pyrogram.errors import UserAlreadyParticipant, UserNotParticipant
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors import ChatAdminRequired, UserNotParticipant, ChatWriteForbidden


from Codexun.tgcalls import calls, queues
from Codexun.tgcalls.youtube import download
from Codexun.tgcalls import convert as cconvert
from Codexun.tgcalls.calls import client as ASS_ACC
from Codexun.database.queue import (
    get_active_chats,
    is_active_chat,
    add_active_chat,
    remove_active_chat,
    music_on,
    is_music_playing,
    music_off,
)

from Codexun import BOT_NAME, BOT_USERNAME
from Codexun import app
import Codexun.tgcalls
from Codexun.tgcalls import youtube
from Codexun.config import (
    DURATION_LIMIT,
    que,
    SUDO_USERS,
    BOT_ID,
    ASSNAME,
    ASSUSERNAME,
    ASSID,
    START_IMG,
    SUPPORT,
    UPDATE,
    BOT_NAME,
    BOT_USERNAME,
)
from Codexun.utils.filters import command
from Codexun.utils.decorators import errors, sudo_users_only
from Codexun.utils.administrator import adminsOnly
from Codexun.utils.errors import DurationLimitError
from Codexun.utils.gets import get_url, get_file_name
from Codexun.modules.admins import member_permissions


def others_markup(videoid, user_id):
    buttons = [
        [
            InlineKeyboardButton(text="‚ñ∑", callback_data=f"resumevc"),
            InlineKeyboardButton(text="II", callback_data=f"pausevc"),
            InlineKeyboardButton(text="‚Ä£‚Ä£I", callback_data=f"skipvc"),
            InlineKeyboardButton(text="‚ñ¢", callback_data=f"stopvc"),
        ],[
            InlineKeyboardButton(text="Manage", callback_data=f"cls"),
        ],
        
    ]
    return buttons


fifth_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200% üîä", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
        ],
    ]
)

fourth_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150% üîä", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
        ],
    ]
)

third_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100% üîä", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
        ],
    ]
)

second_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20%", callback_data="first"),
            InlineKeyboardButton("50% üîä", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
        ],
    ]
)

first_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("20% üîä", callback_data="first"),
            InlineKeyboardButton("50%", callback_data="second"),
            
        ],[
            
            InlineKeyboardButton("100%", callback_data="third"),
            InlineKeyboardButton("150%", callback_data="fourth"),
            
        ],[
            
            InlineKeyboardButton("200%", callback_data="fifth"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
        ],
    ]
)
highquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("Low Quality", callback_data="low"),],
         [   InlineKeyboardButton("Medium Quality", callback_data="medium"),
            
        ],[   InlineKeyboardButton("High Quality ‚úÖ", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="Close üóëÔ∏è", callback_data=f"cls"),
        ],
    ]
)
lowquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("Low Quality ‚úÖ", callback_data="low"),],
         [   InlineKeyboardButton("Medium Quality", callback_data="medium"),
            
        ],[   InlineKeyboardButton("High Quality", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="Close üóëÔ∏è", callback_data=f"cls"),
        ],
    ]
)
mediumquality_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("Low Quality", callback_data="low"),],
         [   InlineKeyboardButton("Medium Quality ‚úÖ", callback_data="medium"),
            
        ],[   InlineKeyboardButton("High Quality", callback_data="high"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
            InlineKeyboardButton(text="Close üóëÔ∏è", callback_data=f"cls"),
        ],
    ]
)

dbclean_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("Yes, Proceed !", callback_data="cleandb"),],
        [    InlineKeyboardButton("Nope, Cancel !", callback_data="cbmenu"),
            
        ],[
            InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cbmenu"),
        ],
    ]
)
menu_keyboard = InlineKeyboardMarkup(
    [
        [
            
            InlineKeyboardButton("‚ñ∑", callback_data="resumevc"),
            InlineKeyboardButton("II", callback_data="pausevc"),
            InlineKeyboardButton("‚Ä£‚Ä£I", callback_data="skipvc"),
            InlineKeyboardButton("‚ñ¢", callback_data="stopvc"),
            
        ],[
            InlineKeyboardButton(text="Volume", callback_data=f"fifth"),
             InlineKeyboardButton(text="Quality", callback_data=f"high"),
        ],[
            InlineKeyboardButton(text="CleanDB", callback_data=f"dbconfirm"),
             InlineKeyboardButton(text="About", callback_data=f"nonabout"),
        ],[
             InlineKeyboardButton(text="üóëÔ∏è Close Menu", callback_data=f"cls"),
        ],
    ]
)


@Client.on_callback_query(filters.regex("skipvc"))
async def skipvc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            """
Only admin with manage voice chat permission can do this.
""",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    chat_title = CallbackQuery.message.chat.title
    if await is_active_chat(chat_id):
            user_id = CallbackQuery.from_user.id
            await remove_active_chat(chat_id)
            user_name = CallbackQuery.from_user.first_name
            rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
            await CallbackQuery.answer()
            await CallbackQuery.message.reply(
                f"""
**Skip Button Used By** {rpk}
‚Ä¢ No more songs in Queue
`Leaving Voice Chat..`
"""
            )
            await calls.pytgcalls.leave_group_call(chat_id)
            return
            await CallbackQuery.answer("ÿ™ÿÆÿ∑Ÿä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.!", show_alert=True)     

@Client.on_callback_query(filters.regex("pausevc"))
async def pausevc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        if await is_music_playing(chat_id):
            await music_off(chat_id)
            await calls.pytgcalls.pause_stream(chat_id)
            await CallbackQuery.answer("ÿ™ŸÖ ÿ•ŸäŸÇÿßŸÅ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ŸÖÿ§ŸÇÿ™Ÿãÿß ÿ®ŸÜÿ¨ÿßÿ≠.", show_alert=True)
            
        else:
            await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©!!", show_alert=True)
            return
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©!", show_alert=True)


@Client.on_callback_query(filters.regex("resumevc"))
async def resumevc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            """
ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.
""",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        if await is_music_playing(chat_id):
            await CallbackQuery.answer(
                "ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©",
                show_alert=True,
            )
            return
        else:
            await music_on(chat_id)
            await calls.pytgcalls.resume_stream(chat_id)
            await CallbackQuery.answer("Music resumed successfully.", show_alert=True)
            
    else:
        await CallbackQuery.answer(f"Nothing is playing.", show_alert=True)


@Client.on_callback_query(filters.regex("stopvc"))
async def stopvc(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        
        try:
            await calls.pytgcalls.leave_group_call(chat_id)
        except Exception:
            pass
        await remove_active_chat(chat_id)
        await CallbackQuery.answer("Music stream ended.", show_alert=True)
        user_id = CallbackQuery.from_user.id
        user_name = CallbackQuery.from_user.first_name
        rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
        await CallbackQuery.message.reply(f"**‚Ä¢ Music successfully stopped by {rpk}.**")
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.", show_alert=True)

@Client.on_callback_query(filters.regex("cleandb"))
async def cleandb(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "Only admin with manage voice chat permission can do this.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
        
        try:
            await calls.pytgcalls.leave_group_call(chat_id)
        except Exception:
            pass
        await remove_active_chat(chat_id)
        await CallbackQuery.answer("Db cleaned successfully!", show_alert=True)
        user_id = CallbackQuery.from_user.id
        user_name = CallbackQuery.from_user.first_name
        rpk = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
        await CallbackQuery.edit_message_text(
        f"‚úÖ __Erased queues successfully__\n‚îÇ\n‚ï∞ Database cleaned by {rpk}",
        reply_markup=InlineKeyboardMarkup(
            [
            [InlineKeyboardButton("‚ùé ¬¶ ÿßŸÑŸÄÿ∫ŸÄÿßÿ°", callback_data="cls")]])
        
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.", show_alert=True)


@Client.on_callback_query(filters.regex("cbcmnds"))
async def cbcmnds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**‚Ä¢ üìÆ ¬¶ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿßŸÑÿ£ÿ≥ÿßÿ≥ŸäŸá**

‚Ä¢ /play (song name) 
- ŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ

‚Ä¢ /pause 
- ŸÑÿ•ŸäŸÇÿßŸÅ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ

‚Ä¢ /resume 
- ŸÑÿßÿ≥ÿ™ÿ¶ŸÜÿßŸÅ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ

‚Ä¢ /skip 
- ŸÑÿ™ÿÆÿ∑Ÿä ÿßŸÑÿ£ÿ∫ŸÜŸäÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©

‚Ä¢ /search (song name) 
- ŸÑŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ

‚Ä¢ /song 
- ŸÑÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ
""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton(
                        "‚ö° ¬¶ ŸÇŸÄÿßŸäŸÖŸÄŸá ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ", callback_data="cbstgs"),
                    InlineKeyboardButton(
                        "ü¶∏‚Äç‚ôÇÔ∏è¬¶ ÿ£ŸàÿßŸÖÿ± ÿßŸÑÿßÿØŸÖŸÜŸäŸá", callback_data="cbowncmnds")
                ],
              [InlineKeyboardButton("‚Ü©Ô∏è ¬¶ ÿ±ÿ¨ŸÄŸÄŸàÿπ", callback_data="cbhome")]]
        ),
    )
@Client.on_callback_query(filters.regex("cbowncmnds"))
async def cbowncmnds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**ÿ£ŸàÿßŸÖÿ± ÿßŸÑŸÖÿßŸÑŸÉ ŸàÿßŸÑŸÖÿ∑Ÿàÿ±ŸäŸÜ üí°**

‚Ä¢ /broadcast (massage)
- ÿ®ÿ´ ÿßÿ∞ÿßÿπŸá ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ®Ÿàÿ™

‚Ä¢ /gcast (massage) 
- ÿ®ÿ´ ÿßÿ∞ÿßÿπŸá ÿ®ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ®Ÿàÿ™

‚Ä¢ /restart 
- ÿ£ÿπÿØ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ

‚Ä¢ /exec
- ŸÜŸÅÿ∞ ÿ£Ÿä ŸÉŸàÿØ

‚Ä¢ /stats
- ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ ŸÉŸÑ ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™

‚Ä¢ /ping 
- ÿßŸÑÿ¨ŸáŸàÿ≤Ÿäÿ© ÿ®ŸäŸÜÿ∫

‚Ä¢ /update
- ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®Ÿàÿ™ ÿ®ÿ£ÿ≠ÿØÿ´ ÿ•ÿµÿØÿßÿ±

‚Ä¢ /gban ÿßŸà /ungban
- ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ÿ∏ÿ± ÿßŸÑÿπÿßŸÑŸÖŸä

‚Ä¢ /leaveall 
ÿ™ÿ±ŸÉ ÿßŸÑŸÖÿ≥ÿßÿπÿØ ŸÖŸÜ ÿ¨ŸÖŸäÿπ ÿßŸÑÿØÿ±ÿØÿ¥ÿßÿ™
""",
        reply_markup=InlineKeyboardMarkup(
            [
              
              [InlineKeyboardButton("‚Ü©Ô∏è ¬¶ ÿ±ÿ¨ŸÄŸÄŸàÿπ", callback_data="cbcmnds")]]
        ),
    )

@Client.on_callback_query(filters.regex("cbabout"))
async def cbabout(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**About {BOT_NAME} Bot üí°**

**[{BOT_NAME}](https://t.me/{BOT_USERNAME})** ÿ®ÿ±ŸÜÿßŸÖÿ¨ Music Bot ŸáŸà ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™ ÿßŸÑŸÖÿµŸÖŸÖ ÿ®Ÿàÿßÿ≥ÿ∑ÿ© @MK_1B_PY ŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ŸÖŸàÿ≥ŸäŸÇŸâ ÿπÿßŸÑŸäÿ© ÿßŸÑÿ¨ŸàÿØÿ© Ÿàÿ∫Ÿäÿ± ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑŸÉÿ≥ÿ± ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑÿ¨ŸÖÿßÿπŸäÿ©.

Ÿäÿ≥ÿßÿπÿØŸÉ Ÿáÿ∞ÿß ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™ ÿπŸÑŸâ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ŸàÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ŸÖŸÜ youtube Ÿàÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ŸÖŸÜ ÿÆÿßÿØŸÖ youtube ŸàÿßŸÑÿπÿØŸäÿØ ŸÖŸÜ ÿßŸÑŸÖŸäÿ≤ÿßÿ™ ÿßŸÑÿ£ÿÆÿ±Ÿâ ÿßŸÑŸÖÿ™ÿπŸÑŸÇÿ© ÿ®ŸÖŸäÿ≤ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© telegram..

**ÿßŸÑŸÖŸÄÿ≥ÿßÿπÿØ :- @{ASSUSERNAME}**""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton("ü™Ñ ¬¶ ÿßŸÑŸÄÿØÿπŸÄŸÖ", url=f"https://t.me/{SUPPORT}"),
                    InlineKeyboardButton("‚öôÔ∏è ¬¶ ÿßŸÑŸÄÿ≥Ÿàÿ±ÿ≥", url=f"https://t.me/MK_1B_PY")
                ],
            [InlineKeyboardButton("üí≠ ¬¶ ŸÑŸÄŸä ÿ™ŸÜŸÄÿµŸäŸÄÿ® ÿ®ŸÄŸàÿ™ŸÄŸÉ ŸÖÿ¨ŸÄÿßŸÜŸä", url=f"https://t.me/MK_1B_PY/1124")],
            [InlineKeyboardButton("‚Ü©Ô∏è ¬¶ ÿ±ÿ¨ŸÄŸÄŸàÿπ", callback_data="cbhome")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbstgs"))
async def cbstgs(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**üîç ¬¶ ÿ≠ŸÄŸàŸÑ ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑŸÄŸÇŸÄÿßÿ¶ŸÖÿ©**

ÿ®ÿπÿØ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿ£ÿ∫ŸÜŸäÿ™ŸÉ ÿå ÿ≥ÿ™ÿ∏Ÿáÿ± ÿ®ÿπÿ∂ ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ŸÑÿ•ÿØÿßÿ±ÿ© ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ÿπŸÑŸâ ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©. ŸàŸáŸÖ ÿπŸÑŸâ ÿßŸÑŸÜÿ≠Ÿà ÿßŸÑÿ™ÿßŸÑŸä :

‚Ä¢ ‚ñ∂Ô∏è
- ÿßÿ≥ÿ™ŸÄÿ¶ŸÜŸÄÿßŸÅ ÿßŸÑŸÖŸÄŸàÿ≥ŸäŸÄŸÇŸâ
‚Ä¢ ‚è∏
- ŸàŸÇŸÄŸÅŸÄÿ© ÿßŸÑŸÄŸÖŸàÿ≥ŸÄŸäŸÇŸâ
‚Ä¢ ‚èπ  
- ŸÜŸáŸÄÿßŸäŸÄÿ© ÿßŸÑŸÖŸÄŸàÿ≥ŸÄŸäŸÇŸâ
‚Ä¢ ‚è≠Ô∏è
- ÿ™ŸÄÿÆŸÄÿ∑Ÿä ÿßŸÑŸÖŸÄŸàÿ≥ŸÄŸäŸÇŸâ

 ŸäŸÄŸÖŸÄŸÉŸÜŸÉ ÿ£ŸäŸÄÿ∂Ÿãÿß ŸÅÿ™ŸÄÿ≠ Ÿáÿ∞Ÿá ÿßŸÑŸÇŸÄÿßÿ¶ŸÖÿ© ŸÖŸÄŸÜ ÿÆŸÄŸÑÿßŸÑ ÿßŸÑÿ£ŸÖÿ± /settings 

**ŸäŸÖŸÉŸÜ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑŸäŸÜ ŸÅŸÇÿ∑ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Ÿáÿ∞Ÿá ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± üìç**""",
        reply_markup=InlineKeyboardMarkup(
            [
            [InlineKeyboardButton("‚Ü©Ô∏è ¬¶ ÿ±ÿ¨ŸÄŸÄŸàÿπ", callback_data="cbcmnds")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbguide"))
async def cbguide(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**ÿßŸÇÿ±ÿ£ ÿßŸÑÿØŸÑŸäŸÑ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä ÿ®ÿπŸÜÿßŸäÿ© üí°**

‚Ä¢ ŸÇŸÖ ÿ£ŸàŸÑÿßŸã ÿ®ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™ ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ™ŸÉ

‚Ä¢ ÿ™ÿπŸäŸäŸÜ ŸÖÿØŸäÿ± ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™

‚Ä¢ ÿßŸÖŸÜÿ≠ ÿ•ÿ∞ŸÜ ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸà

‚Ä¢ ‚Ä¢ ÿßŸÉÿ™ÿ® /reload ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ™ŸÉ

ÿßÿ®ÿØÿ£ ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ŸÉ

‚Ä¢ ÿßŸÑÿ¢ŸÜ ŸÇŸÖ ÿ®ÿ™ÿ¥ÿ∫ŸäŸÑ ÿ£ÿ∫ŸÜŸäÿ™ŸÉ Ÿàÿßÿ≥ÿ™ŸÖÿ™ÿπ!""",
        reply_markup=InlineKeyboardMarkup(
            [[
              InlineKeyboardButton("ü§ï ¬¶ ÿÆÿ∑ŸÄÿ£ ÿ¥ŸÄÿßÿ¶ÿπ", callback_data="cberror")],
              [InlineKeyboardButton("‚Ü©Ô∏è ¬¶ ÿ±ÿ¨ŸÄŸÄŸàÿπ", callback_data="cbhome")]]
        ),
    )


@Client.on_callback_query(filters.regex("cberror"))
async def cberror(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**ŸÖÿπÿ∏ŸÖ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑÿ™Ÿä ÿ™Ÿàÿßÿ¨ŸáŸáÿß üí°**

ŸÅŸä ÿßŸÑÿ∫ÿßŸÑÿ® ÿå ÿ≥ŸäŸÉŸàŸÜ ŸáŸÜÿßŸÉ ÿßŸÑÿÆÿ∑ÿ£ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ÿ≠ŸàŸÑ ŸÖÿ≥ÿßÿπÿØ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ. ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™Ÿàÿßÿ¨Ÿá ÿ£Ÿä ŸÜŸàÿπ ŸÖŸÜ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ™ŸÉ ÿå ŸÅÿ™ÿ£ŸÉÿØ ÿ£ŸàŸÑÿßŸã ŸÅŸä ÿ™ŸÑŸÉ ÿßŸÑŸÖÿ±ÿ© ŸÖŸÜ ÿ£ŸÜ @{ASSUSERNAME} ŸÖÿ™ÿßÿ≠ ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ™ŸÉ. ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÉÿ∞ŸÑŸÉ ÿå ŸÇŸÖ ÿ®ÿ•ÿ∂ÿßŸÅÿ™Ÿá ŸäÿØŸàŸäŸãÿß ŸàŸÇÿ®ŸÑ ÿ∞ŸÑŸÉ ÿ™ÿ£ŸÉÿØ ÿ£Ÿäÿ∂Ÿãÿß ÿ£ŸÜŸá ÿ∫Ÿäÿ± ŸÖÿ≠ÿ∏Ÿàÿ± ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ©.ÿßŸÑŸÖÿ≥ÿßÿπÿØ: - @{ASSUSERNAME} \n\nÿ¥ŸÉÿ±Ÿãÿßüíû!""",
        reply_markup=InlineKeyboardMarkup(
            [
            [
                    InlineKeyboardButton("‚ò¢Ô∏è ¬¶ ÿßŸÑŸÖŸÄÿ≥ÿßÿπÿØ", url=f"https://t.me/{ASSUSERNAME}")
                ],
              [InlineKeyboardButton("‚Ü©Ô∏è ¬¶ ÿ±ÿ¨ŸÄŸÄŸàÿπ", callback_data="cbguide")]]
        ),
    )


@Client.on_callback_query(filters.regex("cbhome"))
async def cbhome(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**ŸÖÿ±ÿ≠ÿ®ÿß [{query.message.chat.first_name}](tg://user?id={query.message.chat.id})** üëã

ÿßŸÜÿß ÿ±ÿ®ŸÄŸÄŸàÿ™ **[{BOT_NAME}](https://t.me/{BOT_USERNAME}) Ÿäÿ™ŸÄŸäŸÄÿ≠ ŸÑŸÄŸÉ ÿ™ŸÄÿ¥ŸÄÿ∫ŸäŸÑ ÿßŸÑŸÄŸÖŸàÿ≥ŸÄŸäŸÇŸâ ŸàÿßŸÑŸÅŸÄŸäÿØŸäŸÄŸà ŸÅŸÄŸä ŸÖÿ¨ŸÄŸÖŸàÿπŸÄÿßÿ™ ŸÖŸÄŸÜ ÿÆŸÄŸÑÿßŸÑ ŸÖÿ≠ŸÄÿßÿØÿ´ŸÄÿßÿ™ ÿßŸÑŸÄŸÅŸäÿØŸäŸÄŸà ÿßŸÑÿ¨ŸÄÿØŸäŸÄÿØÿ© ŸÅŸä Telegram!

üìú ¬¶ ÿßŸÉÿ™ŸÄŸÄÿ¥ŸÅ ÿ¨ŸÄŸÖŸäŸÄÿπ ÿ£ŸàÿßŸÖŸÄÿ± ÿßŸÑŸÄÿ±Ÿàÿ®ŸÄŸàÿ™ ŸàŸÉŸäŸÄŸÅŸäÿ© ÿπŸÄŸÖŸÑŸáÿß ŸÖŸÄŸÜ ÿÆŸÄŸÑÿßŸÑ ÿßŸÑŸÄŸÜŸÇÿ± ÿπŸÑŸÄŸâ ÿ≤ÿßÿ± ¬ª  üìú ¬¶ ÿßŸÑŸÄÿ£ŸàÿßŸÖŸÄŸÄÿ±

üîñ  ŸÑŸÖŸÄÿπÿ±ŸÅÿ© ŸÉŸÄŸäŸÅŸäÿ© ÿßÿ≥ŸÄÿ™ÿÆŸÄÿØÿßŸÖ ŸáŸÄÿ∞ÿß ÿßŸÑŸÄÿ±Ÿàÿ®ŸÄŸàÿ™ ÿå ŸäŸÄÿ±ÿ¨Ÿâ ÿßŸÑŸÜŸÄŸÇÿ± ŸÅŸÄŸàŸÇ ÿ≤ÿßÿ± ¬ª üïäÔ∏ôÿØŸÑŸäŸÄŸÑ ÿßŸÑŸÄÿßÿ≥ŸÄÿ™ÿÆŸÄÿØÿßŸÖ""",
    reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üñ• ¬¶ ÿßŸÑÿ£ŸàÿßŸÖŸÄŸÄÿ±", callback_data="cbcmnds"),
                    InlineKeyboardButton(
                        "‚öôÔ∏è ¬¶ ÿßŸÑŸÄÿ≥ŸÄŸàÿ±ÿ≥", callback_data="cbabout")
                ],
                [
                    InlineKeyboardButton(
                        "üß® ¬¶ ÿØŸÑŸÄŸäŸÑ ÿßŸÑÿßÿ≥ŸÄÿ™ÿÆŸÄÿØÿßŸÖ", callback_data="cbguide")
                ],
                [
                    InlineKeyboardButton(
                        "üéØ ¬¶ ÿßÿ∂ŸÄŸÅŸÄŸÜŸä ŸÑŸÄŸä ŸÖŸÄÿ¨ŸÖŸÄŸàÿπŸÄÿ™ŸÉ ¬¶ üéØ", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
                ]
           ]
        ),
    )


@Client.on_callback_query(filters.regex(pattern=r"^(cls)$"))
async def closed(_, query: CallbackQuery):
    from_user = query.from_user
    permissions = await member_permissions(query.message.chat.id, from_user.id)
    permission = "can_restrict_members"
    if permission not in permissions:
        return await query.answer(
            "ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿ£ÿ∞ŸàŸÜÿßÿ™ ŸÉÿßŸÅŸäÿ© ŸÑŸÑŸÇŸäÿßŸÖ ÿ®Ÿáÿ∞ÿß ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°.",
            show_alert=True,
        )
    await query.message.delete()

@Client.on_callback_query(filters.regex("cbmenu"))
async def cbmenu(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("ÿ£ŸÜÿ™ ŸÖÿ≥ÿ§ŸàŸÑ ŸÖÿ¨ŸáŸàŸÑ !\n\n¬ª ÿßŸÑÿπŸàÿØÿ© ÿ•ŸÑŸâ ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸÜ ÿ≠ŸÇŸàŸÇ ÿßŸÑŸÖÿ≥ÿ§ŸàŸÑ.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("ŸäŸÖŸÉŸÜ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑŸäŸÜ ŸÅŸÇÿ∑ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Ÿáÿ∞ÿß ..!", show_alert=True)
    chat_id = query.message.chat.id
    if is_music_playing(chat_id):
          await query.edit_message_text(
              f"**‚öôÔ∏è {BOT_NAME} Bot Settings**\n\nüìÆ Group : {query.message.chat.title}.\nüìñ Grp ID : {query.message.chat.id}\n\n**Manage Your Groups Music System By Pressing Buttons Given Below üí°**",

              reply_markup=menu_keyboard
         )
    else:
        await query.answer("ŸÑÿß ÿ¥Ÿäÿ° Ÿäÿ™ÿØŸÅŸÇ ÿ≠ÿßŸÑŸäÿß", show_alert=True)



@Client.on_callback_query(filters.regex("high"))
async def high(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇŸàŸÜ ÿßŸÑÿ¢ŸÜ ÿ®ÿ¨ŸàÿØÿ© ÿπÿßŸÑŸäÿ©!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ±ŸÉ ŸÖŸÜ ÿßŸÑŸÖÿπÿ∑Ÿâ ÿ£ÿØŸÜÿßŸá ŸÑÿ•ÿØÿßÿ±ÿ© ÿ¨ŸàÿØÿ© ÿßŸÑÿµŸàÿ™",
        reply_markup=highquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©..", show_alert=True)


@Client.on_callback_query(filters.regex("low"))
async def low(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇŸàŸÜ ÿßŸÑÿ¢ŸÜ ÿ®ÿ¨ŸàÿØÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ©!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ±ŸÉ ŸÖŸÜ ÿßŸÑŸÖÿπÿ∑Ÿâ ÿ£ÿØŸÜÿßŸá ŸÑÿ•ÿØÿßÿ±ÿ© ÿ¨ŸàÿØÿ© ÿßŸÑÿµŸàÿ™.",
        reply_markup=lowquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.", show_alert=True)

@Client.on_callback_query(filters.regex("medium"))
async def medium(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇŸàŸÜ ÿßŸÑÿ¢ŸÜ ÿ®ÿ¨ŸàÿØÿ© ŸÖÿ™Ÿàÿ≥ÿ∑ÿ©!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ±ŸÉ ŸÖŸÜ ÿßŸÑŸÖÿπÿ∑Ÿâ ÿ£ÿØŸÜÿßŸá ŸÑÿ•ÿØÿßÿ±ÿ© ÿ¨ŸàÿØÿ© ÿßŸÑÿµŸàÿ™",
        reply_markup=mediumquality_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©..", show_alert=True)

@Client.on_callback_query(filters.regex("fifth"))
async def fifth(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇŸàŸÜ ÿßŸÑÿ¢ŸÜ ÿ®ÿ≠ÿ¨ŸÖ 200Ÿ™!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ±ŸäÿØ ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿå ŸÅŸÇŸÖ ÿ®ÿ™ÿπŸäŸäŸÜ ŸÖÿ≥ÿ§ŸàŸÑ ŸÖÿ≥ÿßÿπÿØ ÿ£ŸàŸÑÿßŸã.",
        reply_markup=fifth_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° Ÿäÿ™ÿØŸÅŸÇ ÿ≠ÿßŸÑŸäÿß", show_alert=True)

@Client.on_callback_query(filters.regex("fourth"))
async def fourth(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇ ÿßŸÑÿ¢ŸÜ ÿ≠ÿ¨ŸÖ 150!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ±ŸäÿØ ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿå ŸÅŸÇŸÖ ÿ®ÿ™ÿπŸäŸäŸÜ ŸÖÿ≥ÿ§ŸàŸÑ ŸÖÿ≥ÿßÿπÿØ ÿ£ŸàŸÑÿßŸã.",
        reply_markup=fourth_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.", show_alert=True)

@Client.on_callback_query(filters.regex("third"))
async def third(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇŸàŸÜ ÿßŸÑÿ¢ŸÜ ÿ®ÿ≠ÿ¨ŸÖ 100Ÿ™!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ±ŸäÿØ ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿå ŸÅŸÇŸÖ ÿ®ÿ™ÿπŸäŸäŸÜ ŸÖÿ≥ÿ§ŸàŸÑ ŸÖÿ≥ÿßÿπÿØ ÿ£ŸàŸÑÿßŸã.",
        reply_markup=third_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.", show_alert=True)


@Client.on_callback_query(filters.regex("second"))
async def second(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇŸàŸÜ ÿßŸÑÿ¢ŸÜ ÿ®ÿ≠ÿ¨ŸÖ 50Ÿ™!!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ±ŸäÿØ ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿå ŸÅŸÇŸÖ ÿ®ÿ™ÿπŸäŸäŸÜ ŸÖÿ≥ÿ§ŸàŸÑ ŸÖÿ≥ÿßÿπÿØ ÿ£ŸàŸÑÿßŸã.",
        reply_markup=second_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.", show_alert=True)


@Client.on_callback_query(filters.regex("first"))
async def first(_, CallbackQuery):
    a = await app.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not a.can_manage_voice_chats:
        return await CallbackQuery.answer(
            "ŸäŸÖŸÉŸÜ ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ§ŸàŸÑ ÿßŸÑÿ∞Ÿä ŸÑÿØŸäŸá ÿ•ÿ∞ŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ© ÿßŸÑŸÇŸäÿßŸÖ ÿ®ÿ∞ŸÑŸÉ.",
            show_alert=True,
        )
    CallbackQuery.from_user.first_name
    chat_id = CallbackQuery.message.chat.id
    if await is_active_chat(chat_id):
            
        await CallbackQuery.answer("Ÿäÿ™ÿØŸÅŸÇŸàŸÜ ÿßŸÑÿ¢ŸÜ ÿ®ÿ≠ÿ¨ŸÖ 20Ÿ™!", show_alert=True)
        await CallbackQuery.edit_message_text(
        f"**ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ üîä**\n\nÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿ±ŸäÿØ ÿ•ÿØÿßÿ±ÿ© ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿå ŸÅŸÇŸÖ ÿ®ÿ™ÿπŸäŸäŸÜ ŸÖÿØŸäÿ± ŸÖÿ≥ÿßÿπÿØ ÿ£ŸàŸÑÿßŸã.",
        reply_markup=first_keyboard
    )
    else:
        await CallbackQuery.answer(f"ŸÑÿß ÿ¥Ÿäÿ° ŸäŸÑÿπÿ® ŸÅŸä ÿßŸÑÿØÿ±ÿØÿ¥ÿ© ÿßŸÑÿµŸàÿ™Ÿäÿ©.", show_alert=True)

@Client.on_callback_query(filters.regex("nonabout"))
async def nonabout(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**ÿ•ŸÑŸäŸÉ ÿ®ÿπÿ∂ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ÿ≠ŸàŸÑ {BOT_NAME} ÿå ŸÖŸÜ ŸáŸÜÿß ŸäŸÖŸÉŸÜŸÉ ÿ®ÿ®ÿ≥ÿßÿ∑ÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÜÿß ŸàÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ ÿ•ŸÑŸäŸÜÿß!**""",
        reply_markup=InlineKeyboardMarkup(
            [
              [
                    InlineKeyboardButton("ü™Ñ ¬¶ ÿßŸÑŸÄÿØÿπŸÄŸÖ", url=f"https://t.me/{SUPPORT}"),
                    InlineKeyboardButton("‚öôÔ∏è ¬¶ ÿßŸÑŸÄÿ≥Ÿàÿ±ÿ≥", url=f"https://t.me/MK_1B_PY")
                ],
              [InlineKeyboardButton("‚Ü©Ô∏è ¬¶ ÿ±ÿ¨ŸÄŸÄŸàÿπ", callback_data="cbmenu")]]
        ),
    )


@Client.on_callback_query(filters.regex("dbconfirm"))
async def dbconfirm(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("you're an Anonymous Admin !\n\n¬ª revert back to user account from admin rights.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("Only admins cam use this..!", show_alert=True)
    chat_id = query.message.chat.id
    if is_music_playing(chat_id):
          await query.edit_message_text(
              f"**Confirmation ‚ö†Ô∏è**\n\nAre you sure want to end stream in {query.message.chat.title} and clean all Queued songs in db ?**",

              reply_markup=dbclean_keyboard
         )
    else:
        await query.answer("ŸÑÿß ÿ¥Ÿäÿ° Ÿäÿ™ÿØŸÅŸÇ ÿ≠ÿßŸÑŸäÿß", show_alert=True)

